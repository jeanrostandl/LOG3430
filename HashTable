import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.KeyStore.Entry;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
/*
 * Cette classe est une implemenation de HashMap qui permet de 
 * stocker les données sous forme de pair <key-value>
 * 
 */
public class HashTable
{
	//Attributs
    /*
     * chemin du fichier texte qui contient la liste de données
     */
	private String sourceBD_; 
	
	/*
	 * chemin du fichier texte qui contient la liste des
	 * operations à effectuer sur la base de données	
	 */
	private String sourceOperations_;	
	
	/*
	 * le type de hachage qui sera utilisé tout au long de
	 * l’enregistrement dans la structure de données.
	 */
	private int fonctionDeHachage_; 
	
	/*
	 * Le nombre maximum de noeuds que peuvent contenir les
	 * listes chaînées permettant d’éviter les collisions
	 */
	private int nombreMaxDeNoeuds_;
	
	/*
	 * Capacité initiale de la HashMap	
	 */
	private int capacity_ = 11; 	
    
	/*
	 * Definition de la hashTable
	 */
	HashMap<String, String> table;
	
	
    /*
     * Constructeur de la classe HashMap
     * 
     */
	
	public HashTable(String sourceBD, String sourceOperations, int fonctionDeHachage, int nombreMaxDeNoeuds, int capacity) {
	
	   	sourceBD_ = sourceBD;
		sourceOperations_ = sourceOperations;
		fonctionDeHachage_ = fonctionDeHachage;
		nombreMaxDeNoeuds_ = nombreMaxDeNoeuds;
		capacity_ = capacity;		
	
	
		
		/*
		 * Remplissage de la hashMap
		 */	
		table = new HashMap<String, String>(capacity_);
		
		Scanner scanner = this.returnFileContent(sourceBD);
		if(scanner != null)
		{
			while(scanner.hasNext())
			{
				String matricule = scanner.next().replaceAll("[\\<.,*?>]","");			
				String firstName = scanner.next().replaceAll("[\\<.,*?>]","");
				String lastName = scanner.next().replaceAll("[\\<.,*?>]","");
				table.put(matricule, firstName+lastName);
				table.display();// for test			
			}	
		}
   }
	/*
	 * Methode permettant de retourner le contenu du fichier texte.
	 */
	public Scanner returnFileContent(String path)
	{
		Scanner scanner = null; 
		try
		{			
			scanner = new Scanner(new File(path));
			
		}
		catch(Exception e)
		{
			System.out.println("File doesn't exist");
			e.printStackTrace();
						
		}	
		return scanner;
	}
	
	/*
	 * Methode permettant de sauvegarder le contenu de la hashTable.
	 */
	public void saveHashMapContent()
	{
		try
		{
			BufferedWriter writer = new BufferedWriter(new FileWriter(".\\newHashMapContent.txt"));
			writer.write("<");
			writer.close();
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
}
